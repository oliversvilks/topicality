@{
    ViewData["Title"] = "Flow Submission";
}

<h1>@ViewData["Title"]</h1>

<div>
    <textarea data-bind="value: question" placeholder="Enter your question..." rows="3" cols="80"></textarea>
</div>

<h3>Flow Configuration</h3>
<div data-bind="foreach: flowEntries">
    <div class="flow-entry" style="margin-bottom: 20px; padding: 10px; border: 1px solid #ddd;">
        <div>
            <label>Entrance Category:</label>
            <select data-bind="options: $root.availableCategories, 
                             optionsText: 'name', 
                             value: entranceCategory,
                             optionsCaption: 'Select category...'"></select>
            <button data-bind="click: $root.removeFlowEntry">Remove</button>
        </div>

        <div data-bind="foreach: contexts">
            <div class="context" style="margin: 10px 0; padding: 10px; border: 1px solid #eee;">
                <div>
                    <label>Category:</label>
                    <select data-bind="options: $root.availableCategories, 
                                     optionsText: 'name', 
                                     value: selectedCategory,
                                     optionsCaption: 'Select category...'"></select>
                </div>
                <button data-bind="click: $parent.removeContext">Remove Context</button>
            </div>
        </div>
        <button data-bind="click: addContext">Add Context</button>
    </div>
</div>

<button data-bind="click: addFlowEntry">Add Flow Entry</button>
<br/><br/>
<button data-bind="click: submitFlow, enable: canSubmit">Submit Flow</button>

<div data-bind="visible: responseMessage" style="margin-top: 20px; padding: 10px; background-color: #f5f5f5;">
    <h4 data-bind="text: responseMessage"></h4>
</div>

@section Scripts {
    <script>
        function Context() {
            var self = this;
            self.selectedCategory = ko.observable(null);
        }

        function FlowEntry() {
            var self = this;
            self.entranceCategory = ko.observable(null);
            self.contexts = ko.observableArray([new Context()]);

            self.addContext = function() {
                self.contexts.push(new Context());
            };

            self.removeContext = function(context) {
                self.contexts.remove(context);
            };
        }

        function FlowViewModel() {
            var self = this;

            self.question = ko.observable("");
            self.flowEntries = ko.observableArray([new FlowEntry()]);
            self.responseMessage = ko.observable("");
            self.availableCategories = ko.observableArray([]);

            self.loadCategories = function() {
                fetch('/api/UserData/categories')
                    .then(response => {
                        if (!response.ok) throw new Error('Network response was not ok');
                        return response.json();
                    })
                    .then(data => {
                        self.availableCategories(data);
                    })
                    .catch(error => {
                        console.error('Error loading categories:', error);
                        self.responseMessage("Error loading categories. Please try again later.");
                    });
            };

            self.canSubmit = ko.computed(function() {
                return self.question() &&
                    self.flowEntries().length > 0 &&
                    self.flowEntries().every(entry =>
                        entry.entranceCategory() &&
                        entry.contexts().length > 0 &&
                        entry.contexts().every(ctx =>
                            ctx.selectedCategory()
                        )
                    );
            });

            self.addFlowEntry = function() {
                self.flowEntries.push(new FlowEntry());
            };

            self.removeFlowEntry = function(entry) {
                self.flowEntries.remove(entry);
            };

            self.submitFlow = function() {
                var flowData = {
                    question: self.question(),
                    flow: self.flowEntries().map(function(entry) {
                        return {
                            entrance_category: entry.entranceCategory() ? entry.entranceCategory().name : null,
                            contexts: entry.contexts().map(function(ctx) {
                                return {
                                    categories: [ctx.selectedCategory() ? ctx.selectedCategory().name : null]
                                };
                            })
                        };
                    })
                };

                console.log("Submitting:", JSON.stringify(flowData, null, 2));

                fetch('/api/Query/submitFlow', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(flowData)
                })
                    .then(response => {
                        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                        return response.json();
                    })
                    .then(data => {
                        self.responseMessage("Success: " + JSON.stringify(data));
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        self.responseMessage("Error: " + error.message);
                    });
            };

            // Initialize
            self.loadCategories();
        }

        ko.applyBindings(new FlowViewModel());
    </script>
}