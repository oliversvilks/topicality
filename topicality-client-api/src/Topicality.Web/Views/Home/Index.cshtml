@{
    ViewData["Title"] = "Multi context (RAG) query";
}


<div data-bind="visible: isLoading" class="text-center mt-3">
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
    <div>Processing your request...</div>
</div>
<div class="container mt-5">
    <h1>@ViewData["Title"]</h1>
    <h2>Select Categories</h2>
    <ul class="list-group" data-bind="foreach: categories">
        <li class="list-group-item">
            <input type="checkbox" data-bind="checked: isSelected"/>
            <span data-bind="text: name"></span>
        </li>
    </ul>

    <div class="card mt-2">
        <div class="card-body" data-bind="html: answer">

        </div>
    </div>
    <div class="card mt-4">
        <div class="card-body">
            <div class="mt-1">
                <h2>Enter Your Question</h2>
                <textarea class="form-control" data-bind="value: question" placeholder="Enter your question..." rows="3"></textarea>
            </div>

            <button class="btn btn-success mt-3" data-bind="click: submitSelection, enable: canSubmit">Submit</button>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function ViewModel() {
            var self = this;

            self.categories = ko.observableArray([]);
            self.question = ko.observable("");
            self.answer = ko.observable();
            self.isLoading = ko.observable(false);

            // Computed property to check if form can be submitted
            self.canSubmit = ko.computed(function() {
                return self.question() &&
                    self.categories().some(cat => cat.isSelected());
            });

            // Fetch user-related categories
            fetch('/api/UserData/categories')
                .then(response => response.json())
                .then(data => {
                    self.categories(data.map(category => ({
                        name: category.name,  // Using name directly
                        isSelected: ko.observable(false)
                    })));
                })
                .catch(error => {
                    console.error('Error loading categories:', error);
                });

            self.submitSelection = function () {
                // Get selected category names
                const selectedCategories = self.categories()
                    .filter(cat => cat.isSelected())
                    .map(cat => cat.name);

                // Prepare DTO
                const requestData = {
                    Question: self.question(),
                    Categories: selectedCategories
                };

                console.log("Submitting:", requestData);
                self.isLoading(true);
                fetch('/api/Query/submit', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(requestData)
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        self.answer(data.message);
                        self.isLoading(false);
                    })
                    .catch(error => {
                        self.isLoading(false);
                        console.error('Error:', error);
                        alert("Error submitting selection");
                    });
            };
        }

        $(document).ready(function() {
            ko.applyBindings(new ViewModel());
        });
    </script>
}